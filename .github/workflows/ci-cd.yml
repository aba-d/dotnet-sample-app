name: CI-CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - Feature-*
      - main
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches:
      - main
      - Integration
      - develop

permissions:
  security-events: write
  actions: read
  contents: read
  packages: write
  id-token: write

jobs:
  # # ------------------------
  # # Repository Contribution Compliance Gate
  # # ------------------------
  # Repository-Contribution-Compliance:
  #   name: Repo Contribution Compliance
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/repository-contribution-compliance-template.yml@main
  #   with:
  #     base_branch: main
  #     jira_prefix: "SCRUM|PROJ|scrum|proj"
  
  # # # ------------------------
  # # # Code Scan (Codeql)
  # # # ------------------------
  # Codeql-scan:
  #   name: GHAS Scan & Quality Gate
  #   needs: Repository-Contribution-Compliance
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/codeql-template.yml@main
  #   with:
  #     language: 'csharp'
  #     projectPath: 'src/dotnet-sample-app/dotnet-sample-app.csproj'
  #     buildCommand: 'dotnet publish src/dotnet-sample-app/dotnet-sample-app.csproj -c Release -o publishoutput'
  #     run-codeql-gate-check: "no"
  #   secrets: inherit
  
  # # # ------------------------
  # # # Veracode
  # # # ------------------------
  # Veracode-scan:
  #   name: Veracode SAST & Quality Gate
  #   needs: Repository-Contribution-Compliance
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/veracode-baseline-scan-template.yml@main
  #   with:
  #     run-veracode-gate-check: "yes"
  #   secrets: inherit

  # # # ------------------------
  # # # Sonarqube scan
  # # # ------------------------
  # Sonarqube-scan:
  #   name: SonarQube Coverage & Quality Gate
  #   needs:  Repository-Contribution-Compliance
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/sonarqube-scan-template-new.yml@Feature-BlueGreen
  #   with:
  #     projectKey: 'org-testfordemo_dotnet-sample-app'
  #     organizationKey: org-testfordemo
  #     projectSlnPath: "dotnet-sample-app.sln"
  #     testProjectPath: "src/dotnet-sample-app.Tests/dotnet-sample-app.Tests.csproj"
  #     # language: 'dotnet'
  #     # language-version: '8.0'
  #     run-sonarqube-gate-check: 'no'
  #   secrets:
  #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # # # ------------------------
  # # # CI Stage (Build Image and Push to ECR)
  # # # ------------------------
  # ci:
  #   name: Build, Scan and Push Image to ECR
  #   needs: [Sonarqube-scan, Veracode-scan, Codeql-scan]
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/docker-build-push.yml@main
  #   with:
  #     app-language: csharp
  #     project-path: 'src/dotnet-sample-app'
  #     dockerfile-path: 'docker/Dockerfile'
  #     language-version: '8.0'
  #     environment: 'dev'
  #   secrets: inherit

  # # # ------------------------
  # # # Veracode
  # # # ------------------------
  # Prisma-Image-scan:
  #   name: Prisma Image Scan & Quality Gate
  #   needs: ci
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/prisma-scan-template.yml@Feature-BlueGreen
  #   with:
  #     run-prisma-gate-check: "yes"
  #   secrets: inherit

  # ------------------------
  # Deploy to Dev (auto) ECS Task + Service
  # ------------------------
  # ecs-deploy-dev:
  #   # needs: Prisma-Image-scan
  #   name: Deploy to Dev
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/ecs-deployment-templatebg.yml@Feature-BlueGreen
  #   with:
  #     environment: "dev"
  #     app-language: "csharp"
  #     extra-env: '[{\"name\":\"ASPNETCORE_ENVIRONMENT\",\"value\":\"Development\"}]'
  #   secrets: inherit

  # Switch-Traffic:
  #   needs: ecs-deploy-dev
  #   name: Switch Traffic to Live
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/manual-promotion.yml@Feature-BlueGreen
  #   with:
  #     environment: "dev"
  #     temp-listener-arn: ${{ needs.ecs-deploy-dev.outputs.TEMP_LISTENER_ARN }}
  #     idle-tg: ${{ needs.ecs-deploy-dev.outputs.IDLE_TG }}
  #     idle-service: ${{ needs.ecs-deploy-dev.outputs.IDLE_SERVICE }}
  #     is-first-deploy: ${{ fromJSON(needs.ecs-deploy-dev.outputs.IS_FIRST_DEPLOY) }}
  #     live-service: ${{ needs.ecs-deploy-dev.outputs.LIVE_SERVICE}}
  #   secrets: inherit

  # Check-Approval:
  #   name: Check for approval and rejection in QA Deployment
  #   needs: Switch-Traffic
  #   # if: needs.Switch-Traffic == 'success'
  #   environment: qa
  #   continue-on-error: true
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Test Failure Step
  #       run: |
  #         echo "No failures in Dev Deployment"

  # # ------------------------
  # # Deploy to QA (requires approval)
  # # ------------------------
  # ecs-deploy-qa:
  #   name: Deploy to QA
  #   needs: ecs-deploy-dev
  #   if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/ecs-deployment-template.yml@main
  #   with:
  #     environment: qa
  #     app-language: csharp
  #     extra-env: '[{\"name\":\"ASPNETCORE_ENVIRONMENT\",\"value\":\"QA\"}]'
  #   secrets: inherit

  #  ecs-deploy-qa:
  #   needs: ecs-deploy-dev
  #   name: Deploy to QA
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/ecs-deployment-templatebg.yml@Feature-BlueGreen
  #   with:
  #     environment: "qa"
  #     app-language: "csharp"
  #     extra-env: '[{\"name\":\"ASPNETCORE_ENVIRONMENT\",\"value\":\"Development\"}]'
  #     blue-target-group: "arn:aws:elasticloadbalancing:us-east-2:707733857215:targetgroup/dotnet-sample-blue-tg/e9b3d3830f76c2b8"
  #     green-target-group: "arn:aws:elasticloadbalancing:us-east-2:707733857215:targetgroup/dotnet-sample-green-tg/5ca12b509fdda74c"
  #     alb-arn: "arn:aws:elasticloadbalancing:us-east-2:707733857215:loadbalancer/app/myapp-bluegreen-alb/f93c1f7fc8a1b67d"
  #     main-listener-arn: "arn:aws:elasticloadbalancing:us-east-2:707733857215:listener/app/myapp-bluegreen-alb/f93c1f7fc8a1b67d/c2749df7b4391a8f"
  #     use-temp-listener: true
  #     temp-listener-port: "8081"
  #   secrets: inherit

  # ------------------------
  # Notify the Jira
  # ------------------------
  # notify-jira:
  #   name: Jira Notify
  #   runs-on: ubuntu-latest
  #   needs: [Codeql-scan, ci, ecs-deploy-dev, Sonarqube-scan, Veracode-scan, ecs-deploy-qa]
  #   if: |
  #     needs.Codeql-scan.result == 'failure' ||
  #     needs.ci.result == 'failure' ||
  #     needs.ecs-deploy-dev.result == 'failure' ||
  #     needs.Sonarqube-scan.result == 'failure' ||
  #     needs.Veracode-scan.result == 'failure' ||
  #     (needs.ecs-deploy-qa.result != 'cancelled' && needs.ecs-deploy-qa.result == 'failure')
  #   steps:
  #     - name: Create Jira Bug
  #       run: |
  #         curl -X POST https://abasahebdubal.atlassian.net/rest/api/2/issue \
  #         -H "Authorization: Basic ${{ secrets.JIRA_AUTH }}" \
  #         -H "Content-Type: application/json" \
  #         -d '{
  #           "fields": {
  #             "project": { "key": "SCRUM" },
  #             "summary": "CI Pipeline Failed - ${{ github.workflow }} #${{ github.run_number }}",
  #             "description": "One or more jobs failed.\nRepo: ${{ github.repository }}\nRun URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
  #             "issuetype": { "id": "10007" },
  #             "parent": { "key": "SCRUM-2" }
  #           }
  #         }'
  
  # # ------------------------
  # # Deploy to Prod (requires approval)
  # # ------------------------
#    ecs-deploy-prod:
#     name: Deploy to QA
#     needs: ecs-deploy-dev
#     if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
#     uses: aba-enterprise/enterprise-ci-templates/.github/workflows/ecs-deployment-template.yml@main
#     with:
#       environment: Prod
#       app-language: csharp
#       extra-env: '[{\"name\":\"ASPNETCORE_ENVIRONMENT\",\"value\":\"Production\"}]'
#     secrets: inherit

# --- Job 1: Auto deploy to Dev ---
  deploy-dev:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - run: echo "🚀 Deploying to Dev environment..."
      - run: echo "✅ Dev deployment complete."

  # --- Job 2: QA Approval & Deploy ---
  wait-for-qa-approval:
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment:
      name: qa
    outputs:
      approved: ${{ steps.set-output.outputs.approved }}
    steps:
      - name: QA approval placeholder
        id: set-output
        # Set true if approved, false if rejected
        run: |
          QA_APPROVE="${{ github.event.inputs.qa_approve || 'false' }}"
          if [ "$QA_APPROVE" == "true" ]; then
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "approved=false" >> $GITHUB_OUTPUT
          fi

  deploy-qa:
    runs-on: ubuntu-latest
    needs: wait-for-qa-approval
    if: ${{ needs.wait-for-qa-approval.outputs.approved == 'true' }}
    steps:
      - run: echo "🚀 Deploying to QA environment..."
      - run: echo "✅ QA deployment complete."

  skip-qa:
    runs-on: ubuntu-latest
    needs: wait-for-qa-approval
    if: ${{ needs.wait-for-qa-approval.outputs.approved != 'true' }}
    steps:
      - run: echo "❌ QA not approved or timed out — skipping deployment."

  # --- Job 3: Prod Approval & Deploy ---
  wait-for-prod-approval:
    runs-on: ubuntu-latest
    needs: [deploy-qa, skip-qa]
    environment:
      name: Prod
    outputs:
      approved: ${{ steps.set-output.outputs.approved }}
    steps:
      - name: Prod approval placeholder
        id: set-output
        run: |
          if [ "${{ github.event.inputs.prod_approve }}" == "true" ]; then
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "approved=false" >> $GITHUB_OUTPUT

  deploy-prod:
    runs-on: ubuntu-latest
    needs: wait-for-prod-approval
    if: ${{ needs.wait-for-prod-approval.outputs.approved == 'true' }}
    steps:
      - run: echo "🚀 Deploying to Prod..."

  skip-prod:
    runs-on: ubuntu-latest
    needs: wait-for-prod-approval
    if: ${{ needs.wait-for-prod-approval.outputs.approved != 'true' }}
    steps:
      - run: echo "❌ Prod not approved — skipping."
